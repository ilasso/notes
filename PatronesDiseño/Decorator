Structure pattern

Decorator Pattern:

permite adicionar dinamicamente propiedades adicionales y metodos a objetos existentes

"attach additional responsabilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality"

index.js
var Shopper = require('./Shopper');
var InventoryItem = require('./InventoryItem');

var alex = new Shopper('Alex', 100);

var walkman = new InventoryItem("Walkman", 29.99);
var necklace = new InventoryItem("Necklace", 9.99);

alex.purchase(necklace);
alex.purchase(walkman);

alex.printStatus();


shopper.js

class Shopper {

    constructor(name, account=0) {
        this.name = name;
        this.account = account;
        this.items = [];
    }

    purchase(item) {
        if (item.price > this.account) {
            console.log(`Cannot afford ${item.name}`);
        } else {
            console.log(`Purchasing item ${item.name}`);
            this.account -= item.price;
            this.items.push(item);
        }
    }

    printStatus() {
        console.log(`${this.name} has purchased ${this.items.length} items:`);
        this.items.forEach(item => {
            console.log(`   * ${item.name} - ${item.price}`);
        })
        console.log(`${this.name} has $${this.account.toFixed(2)} remaining.`);
    }

}

module.exports = Shopper;





inventoryItem.js

class InventoryItem {

    constructor(name, price) {
        this.name = name
        this.price = price
    }

    print() {
        console.log(`${item.name} costs ${item.price}`)
    }

}

module.exports = InventoryItem;


se puede basado en el objeto inicial adicionar propiedades haciendo un wrapp. para este
ejemplo se pueden  crear items gold y diamond. en golden se modifica el nombre con el
prefijo "Golden" y el precio se le aumentan 1000.En diamante lo mismo pero se adiciona una
nueva propiedad cutsGlass. Esto se hace a la instancia. se toma un item existente baseItem
para crear un nuevo objeto con propiedades adicionales.

index.js
var Shopper = require('./Shopper');
var {
  InventoryItem,
  GoldenInventoryItem,
  DiamondInventoryItem
} = require('./InventoryItem');

var alex = new Shopper('Alex', 4000);

var walkman = new InventoryItem("Walkman", 29.99);
var necklace = new InventoryItem("Necklace", 9.99);

var gold_necklace = new GoldenInventoryItem(necklace);
var diamond_gold_necklace = new DiamondInventoryItem(gold_necklace);

var diamond_walkman = new DiamondInventoryItem(walkman);

alex.purchase(diamond_gold_necklace);
alex.purchase(diamond_walkman);

alex.printStatus();

diamond_walkman.print();


Inventoryitem.js


class InventoryItem {

    constructor(name, price) {
        this.name = name
        this.price = price
    }

    print() {
        console.log(`${item.name} costs ${item.price}`)
    }

}

class GoldenInventoryItem {

    constructor(baseItem) {
        this.name = `Golden ${baseItem.name}`;
        this.price = 1000 + baseItem.price;
    }

}

class DiamondInventoryItem {

  constructor(baseItem) {
      this.name = `Diamond ${baseItem.name}`;
      this.price = 1000 + baseItem.price;
      this.cutsGlass = true;
  }

  print() {
      console.log(`${this.name} costs a lot of money...`);
  }

}

module.exports = {InventoryItem, GoldenInventoryItem, DiamondInventoryItem};


shopper.js

class Shopper {

    constructor(name, account=0) {
        this.name = name;
        this.account = account;
        this.items = [];
    }

    purchase(item) {
        if (item.price > this.account) {
            console.log(`Cannot afford ${item.name}`);
        } else {
            console.log(`Purchasing item ${item.name}`);
            this.account -= item.price;
            this.items.push(item);
        }
    }

    printStatus() {
        console.log(`${this.name} has purchased ${this.items.length} items:`);
        this.items.forEach(item => {
            console.log(`   * ${item.name} - ${item.price}`);
        })
        console.log(`${this.name} has $${this.account.toFixed(2)} remaining.`);
    }

}

module.exports = Shopper;







