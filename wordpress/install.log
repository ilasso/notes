instalar xampp: instala mysql php y perl
https://www.apachefriends.org/es/download.html
I. Ir a la carpeta donde se descargó el archivo del paso anterior.

III. Cambiar permisos al instalador:
chmod 755 xampp-linux-*-installer.run
sudo ./xampp-linux-*-installer.run
sudo /opt/lampp/lampp start
sudo /opt/lampp/lampp stop


ir a https://wordpress.org/
descargar wordpress:https://wordpress.org/
I.I Por defecto al descargar e instalar algo en / (root), es necesario dar permisos para poder agregar todos los archivos de wordpress a la carpeta necesaria.
El Profesor nos indica que en htdocs debe ir la carpeta del proyecto y dentro la carptea extraída de la descarga de wordpress.
htdocs se encuentra en :
/opt/lampp/htdocs
I.II Dar permisos a la carpeta htdocs para que cambie el owner y el group owner.
$sudo chmod -R 777 /opt/lampp/htdocs
OJO: realizo ésto porque soy el único que va a tocar el proyecto, sino es mejor cambiar solo el ownership. Se haec así:

sudo chown –R [Username]:[Groupname] /opt/lampp/htdocs
II. Ir a carpeta dónde se descargó el archivo del paso anterior y extraer archivos.
III. Tomar todos los archivos y dejarlos dentro la carpeta del proyecto. Los archivos que contiene la carptea wordpres deben quedar justo después de la carpeta del proyecto.

IV. En Ubuntu se deben definir una seguridad por defecto, eso nos asegura el ingreso a phpmyadmin y la mínima seguridad al proyecto.
sudo /opt/lampp/lampp security

Esto te va a pedir si quieres cambiar contraseña, al final te debe aparecer la palabra Done.
A partir de éste punto puedes ingresar a phpmyadmin.

V. Crear el nombre de la tabla del proyecto en phpmyadmin: ve a localhost/phpmyadmin y hazlo como indica el profesor en la clase.

VI. Ve a la carpeta del proyecto, cambia el nombre de wp-config-sample.php por wp-config.php y define los Salt Keys: Aquí está el enlace:
http://api.wordpress.org/secret-key/1.1/salt
VI. Escribe en donde dice // ** MySQL settings - You can get this info from your web host ** // :
define( 'DB_NAME', 'cliniq' );
define( 'DB_USER', 'root' );
define( 'DB_PASSWORD', '' );
define( 'DB_HOST', 'localhost' );
define( 'DB_CHARSET', 'utf8' );
define( 'DB_COLLATE', '' );

VII. ve a la dirección:

localhost/{nombre de tu proyecto}

VIII. Configura wordpress como El Profesor indica y listo.



#tutorial
tutorial para instalar wordpress con docker
https://platzi.com/tutoriales/1812-fundamentos-wordpress/4877-instalar-wordpress-usando-docker/
# Crear contenedor para MySql
docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=1234 --name=mysql mysql:5.7
# Ingresar al contenedor y crear la base de datos
docker exec -it mysql bash
mysql -u root -p # pedirá la contraseña
CREATE DATABASE platzigifts;
# Crear contenedor para wordpress
docker run -d -p 2000:80 -e WORDPRESS_DB_HOST=192.168.1.60 -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_NAME=platzigifts -e WORDPRESS_DB_PASSWORD=1234 --name wp wordpress:5.3.2
En el curso vimos como instalar wordpress requiere de un entorno de apache, php y mysql. Si bien es cierto con herramientas como XAMPP esto termina siendo una tarea
muy sencilla, personalmente prefiero usar docker para preparar entornos de este tipo ya que me da ciertas ventajas:

    Tengo control total sobre la versión de Wordpress a usar. Lo mismo aplica para MySql.

    Me permite tener un solo proceso de instalación independientemente del sistema operativo que se use. Util si trabajas con más personas y cada una usa distintos sistemas operativos.

<h3>Instalando MySql</h3>

Wordpress usa MySql como base de datos así que es lo primero que vamos a instalar, para ello usaremos el comando run de docker.
docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=1234 --name=mysql mysql:5.7

Vamos a explicar de manera rápida que significan los parámetros

    d: Es la forma de indicarle a docker que ejecute el comando en background, así no nos queda la terminal ocupada por el proceso.

    p: Con el parámetro p le indicamos a docker que redireccione el puerto 3306 del contenedor al 3306 de nuestro host.

    e: Permite establecer variables de entorno, en este caso usamos MYSQL*ROOT_PASSWORD para indicar el password de nuestro usuario root. También existe una variable para modificar el usuario por defecto, puedes consultar esta y otras variables en la documentación

    name: Permite indicar el nombre del contenedor, puedes usar el que más te guste.

    mysql:5.7: El nombre de la imagen más la versión, es decir queremos usar la versión 5.7 de MySql, en la documentación también puedes ver las versiones disponibles y usar la que más te guste.

<h3>Creando la base de datos</h3>

Podemos conectarnos a nuestro contenedor de mysql usando el comando exec

docker exec -it mysql bash
Una vez dentros del contenedor puedes conectarte a la consola de mysql
mysql -u root -p

El parámetro -u es para indicar el usuario y -p es para decirle que queremos ingresar la contraseña. Al presionar enter escribimos la contraseña 1234 que fue el valor que le dimos al crear el contenedor con la variable MYSQL_ROOT_PASSWORD.

Ahora podemos crear la base de datos usando SQL de toda la vida.

CREATEDATABASE platzigifts;

Listo, ahora debemos escribir dos veces exit para salir primero de la terminal de mysql y luego de la terminal del contenedor.
<h3>Instalando wordpress</h3>

Ahora si podemos instalar wordpress, para hacer esto vamos a usar la imagen oficial de wordpress para docker.

Tal cual como hicimos con mysql usaremos el comando run para poder crear nuestro contenedor.

docker run -d -p 2000:80 -e WORDPRESS_DB_HOST=192.168.1.60 -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_NAME=platzigifts -e WORDPRESS_DB_PASSWORD=1234 --name wp wordpress:5.3.2

Tal cual como con mysql vamos a explicar los parámetros usados para este contenedor:

    p: En este caso como wordpress siempre usa por defecto el puerto 80, le estamos indicando que quiero que ese puerto 80 del contenedor sea redireccionado al puerto 2000 de mi computadora host. Uso el puerto 2000 por puro gusto, puedes usar cualquier puerto incluso el 80.

    e: Al igual que mysql, wordpress tiene variables de entorno para personalizar distintos valores, en este caso estoy usando las variables de entorno relacionadas a la base de datos para que pueda conectarse sin problemas. WORDPRESS_DB_HOST es el host de la base de datos, el valor de 192.168.1.60 hace referencia a mi IP local, usa la de tu computadora. WORDPRESS_DB_USER es el nombre de usuario de la base de datos, WORDPRESS_DB_NAME representa el nombre de la base de datos en este caso es platzigifts. Por ultimo WORDPRESS_DB_PASSWORD para la contraseña del usuario root, según este ejemplo es 1234.

    wordpress:5.3.2: El nombre de la imagen y la versión de wordpress que queremos usar.

Los parámetros -d y –name cumplen el mismo funcionamiento explicado al momento de crear el contenedor para mysql.
<h3>Probando Wordpress</h3>

Ok una vez hecho esto ya podemos ir a nuestro navegador y terminar el proceso de instalación. En este caso nuestra url es la IP local más el puerto 2000.

http://192.168.1.60:2000

 ¡Listo! Ya tenemos wordpress funcionando para poder seguir el curso.


 ####fin tutorial docker

 IMPORTANCIA DE LOS ROLES DE USUARIO

Los roles te permitirán gestionar los permisos de los usuarios dentro de tu sitio, es decir, qué puede y qué no puede hacer dentro del administrador. Estas acciones se denominan capabilities.

Esto es muy útil ya te permite segmentar las tareas de tus usuarios. Por ejemplo, si dentro de la web tienes a alguien cuya tarea es la de crear y corregir notas de blog, si le asignas el rol Editor a su usuario, este no va a poder agregar plugins ni modificar el contenido de las páginas, solo podrá crear y editar notas. Esta práctica es muy importante para garantizar la seguridad y la estructura de nuestro sitio.

Se pueden presentar casos en los que los roles por defecto no alcancen o sean demasiado restrictivos, para eso WordPress brinda la posibilidad de crear, eliminar y modificar roles.
CREAR UN ROL DE USUARIO

Para crear un rol de usuario podés utilizar la función add_role() que nos provee WordPress, la tenés que utilizar dentro de una función y asignarla al hook init. Esto tiene que hacerse desde el archivo functions.php.

function add_administrador_tema_role() { //nombre de nuestra función, puede ser el nombre que quieras
    add_role(
        'administrador_tema', //Nombre de role.
        'Administrador Tema', //Nombre que se visualará en la creación o página de opciones de usuarios.
       array(
            'read' => true, //Permite el acceso al dashboard del adminitrador.
            'switch_themes' => true, //Permite el cambio de temas.
            'edit_themes'   => true, //Permite editar archivos desde el administrado de archivos del tema.
            'edit_theme_options' => true, //Permite modificar Widgets,Menús, Personalizar.
            'install_themes'    => true,  //Permite instalar temas nuevos.
            'update_themes' => true, //Permite actualizar temas instalados.
            'delete_themes' => true, //Permite eliminar temas.

            )   //Array con las capabilities
    );
}

//add_action(Hook, Nombre de la función)
add_action('init', 'add_administrador_tema_role');

Una vez que este código esté inicializado, el usuario ya quedará creado con esa configuración. Si necesitás eliminarlo, no bastará con eliminar la función, tendrás que usar el método que veremos a continuación.
ELIMINAR UN ROL DE USUARIO

Para eliminar un rol de usuario podés a utilizar la función remove_role() y, de la misma forma que para crearlo, tenés que utilizarla dentro de una función asignada al hook init, en el archivo function.php.

function remove_role_administrado_temas() { //Nombre de la función
    remove_role( 'administrador_tema' );
}

//add_action(Hook, Nombre de la función)
add_action( 'init', 'remove_role_administrado_temas' );

MODIFICANDO CAPABILITIES EN ROLES

Para agregar capabilities en un role, lo primero que tenés que hacer es instanciar el role dentro de una variable conla función get_role(). Una vez hecho eso puedes utilizar los métodos add_cap() y remove_cap().

En el siguiente ejemplo se le dará al role de usuario subscriptor el permiso para editar posts (entradas de blog, custom post type).


function add_cap_subscriber(){ //Nombre de la función
    $role = get_role( 'subscriber' ); //Instaciamos el role en la variable $role
    $role->add_cap( 'edit_posts'); //Agregamos la cabability usando el método add_cap().
}

//add_action(Hook, Nombre de la función)
add_action( 'init', 'add_cap_subscriber');

En el siguiente ejemplo se removerá al role de usuario editor, el permiso para modificar contenidos (entradas de blog, custom post type, etc).


function remove_cap_editor(){ //Nombre de la función
    $role = get_role( 'editor' ); //Instaciamos el role en la variable $role
    $role->remove_cap('edit_pages'); //Removemos la cabability usando el método remove_cap().
}

//add_action(Hook, Nombre de la función)
add_action( 'init', 'remove_cap_editor');

Podés ver la lista completa de capabilities por roles en la documentación oficial de WordPress, haciendo clic aquí.
https://wordpress.org/support/article/roles-and-capabilities/#administrator

Un starter Theme para WordPress https://underscores.me/

Documentacíon:

https://developer.wordpress.org/themes/basics/main-stylesheet-style-css/#example
